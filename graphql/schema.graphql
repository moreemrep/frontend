
interface Node { 
    id: ID!
}
type RepublicaPayload { 
    distancia: Float!
    nome: String!
    descricao: String
    localizacao: [Float!]
}
type ProcurarRepublicaPayload { 
    republicas: [RepublicaPayload!]!
    centro: [Float!]!
    success: Boolean!
    error: String
}
type ProcurarUniversidadePayload { 
    universidades: [Universidade!]!
    success: Boolean!
    error: String
}
type Republica implements Node { 
    id: ID!
    nome: String
    tipo: Tipo
    distancia: Int
}
type Universidade implements Node { 
    id: ID!
    nome: String
    sigla: String
    localizacao: [Float]
}
type PageInfo { 
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}
type ResponsePayload { 
    success: Boolean!
    error: String
}
type Query { 
    node(id: ID!): Node
}
type Mutation { 
    criarUniversidade(input: CriarUniversidadeInput!): ResponsePayload!
    criarRepublica(input: CriarRepublicaInput!): ResponsePayload!
    editarRepublica(input: EditarRepublicaInput!): ResponsePayload!
    procurarRepublica(input: ProcurarRepublicaInput!): ProcurarRepublicaPayload!
    procurarUniversidade(input: ProcurarUniversidadeInput!): ProcurarUniversidadePayload!
}
input CriarUniversidadeInput { 
    nome: String!
    sigla: String!
    localizacao: [Float!]!
}
input CriarRepublicaInput { 
    nome: String!
    endereco: String!
    localizacao: [Float!]!
    tipo: Tipo!
    descricao: String!
    disponivel: Boolean!
    mostrarNoMapa: Boolean!
}
input EditarRepublicaInput { 
    nome: String
    endereco: String
    localizacao: [Float!]!
    tipo: Tipo
    descricao: String
    disponivel: Boolean
}
input ProcurarRepublicaInput { 
    universidade: ID!
    tipo: Tipo!
    distancia: Int!
}
input ProcurarUniversidadeInput { 
    nome: String
    sigla: String
}
enum Tipo { 
    FEMININA
    MASCULINA
    MISTA
}
scalar Datetime  